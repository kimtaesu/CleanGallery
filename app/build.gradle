apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'jacoco'
apply plugin: 'io.fabric'

android {
    compileSdkVersion 26
    buildToolsVersion '26.0.2'

    defaultConfig {
        applicationId "com.hucet.clean.gallery"
        minSdkVersion 21
        targetSdkVersion 26
        versionCode 2
        versionName "2.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
    }
    signingConfigs {
        release {
            storeFile file(RELEASE_STORE_FILE)
            storePassword RELEASE_STORE_PASSWORD
            keyAlias RELEASE_KEY_ALIAS
            keyPassword RELEASE_KEY_PASSWORD
        }
    }
    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {

            testCoverageEnabled false
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
    }
    packagingOptions {
        exclude 'META-INF/app_debug.kotlin_module'
    }
    testOptions {
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }
    lintOptions {
        abortOnError false
    }
}

// junit5 doesn't support android projects out of the box
apply plugin: "de.mannodermaus.android-junit5"
junitPlatform {
    filters {
        engines {
            include 'spek'
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation kotlinDeps.kotlin
    testImplementation kotlinDeps.kotlinReflect
    implementation androidSupportDeps.androidSupportV7
    implementation androidSupportDeps.constraintLayout
    implementation androidSupportDeps.supportRecyclerView
    implementation androidSupportDeps.supportDesign
    implementation androidSupportDeps.archRuntime
    implementation rxDeps.rxKotlin
    implementation rxDeps.rxAndroid
    implementation opensourceDeps.timber
    implementation opensourceDeps.gson
    implementation opensourceDeps.materialPerference
    implementation opensourceDeps.materialDialogCore
    implementation opensourceDeps.materialDialogCommon
    kapt opensourceDeps.permissionsDispatcherProcessor
    implementation(opensourceDeps.permissionDispatcher) {
        // if you don't use android.app.Fragment you can exclude support for them
        exclude module: "support-v13"
    }
    implementation daggerDeps.dagger
    implementation daggerDeps.daggerSupport
    kapt daggerDeps.daggerCompiler
    kapt daggerDeps.daggerProcessor
    compileOnly daggerDeps.javaxAnnotation
    kapt opensourceDeps.glideCompiler
    implementation opensourceDeps.glide
    implementation firebaseDeps.crash
    implementation('com.crashlytics.sdk.android:crashlytics:2.7.1@aar') {
        transitive = true
    }
    implementation 'com.google.firebase:firebase-core:11.0.4'
    testImplementation testDeps.junit
    testImplementation testDeps.mock
    testImplementation testDeps.mockInline
    testImplementation testDeps.robolectric
    testImplementation(testDeps.spekApi) {
        exclude group: "org.jetbrains.kotlin"
    }
    testImplementation(testDeps.spekJunitEngine) {
        exclude group: "org.junit.platform"
        exclude group: "org.jetbrains.kotlin"
    }
    testImplementation testDeps.spekSubject
    testImplementation testDeps.junitPlatformEngine
    testImplementation testDeps.kluent
    testImplementation testDeps.kluentAndroid
    debugImplementation debugDeps.stetho
}
afterEvaluate {
    compileDebugUnitTestKotlin {
        finalizedBy copyKotlinDebugUnitTestClasses
        finalizedBy copyKotlinDebugClasses
    }
}

task copyKotlinDebugUnitTestClasses(type: Copy) {
    from "build/tmp/kotlin-classes/debugUnitTest"
    into "build/intermediates/classes/test/debug"
}

task copyKotlinDebugClasses(type: Copy) {
    from "build/tmp/kotlin-classes/debug"
    into "build/intermediates/classes/debug"
}

apply plugin: 'com.google.gms.google-services'

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "$project.buildDir/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
    ])
}
